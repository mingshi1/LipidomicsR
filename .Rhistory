res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
View(pdt)
View(rsd.res)
data=read.csv("D:\\Rpackages\\lipidomicR\\R\\test_muti_samples.csv",header = T,row.names = 1)
View(data)
spdt=data.frame(species=rownames(data))
rownames(spdt)=spdt$species
spdt=spdt[,-1]
del=data.frame(species=rownames(data))
rownames(del)=del$species
del=del[,-1]
for (i in 1:(ncol(data)/n) ){
dt=data[,(n*i+1-n):(n*i)]
name=colnames(data[,(n*i+1-n):(n*i)])
if (method=="PCA"){
pdt=as.data.frame(prcomp(dt)$rotation)
c1=mean(pdt[,1])
c2=mean(pdt[,2])
pdt$res=0
for (a in 1:n){
pdt$res[a]=(pdt[a,1]-c1)^2+(pdt[a,2]-c2)^2
}
avt=order(pdt$res,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}else{
ddt=as.matrix(dist(t(dt)))
avg_distances <- as.data.frame(colMeans(ddt))
avt=order(avg_distances$`colMeans(ddt)`,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
View(spdt)
#' KO_1=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_2=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_3=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_4=rnorm(n=5,mean=0.3,sd=0.1)
#' data=data.frame(WT_1,WT_2,WT_3,WT_4,KO_1,KO_2,KO_3,KO_4)
#' rownames(data)=c("LPC(16:0)","PC(14:0/16:1)","PC(18:1/18:1)","PE(18:0/20:1)","PS(20:1/20:1)")
#' n=4
#' m=1
#' delRep(data,n,m)
#' @export
delRep<-function(data,n,m,method="PCA",show.del=FALSE){
spdt=data.frame(species=rownames(data))
rownames(spdt)=spdt$species
spdt=spdt[,-1]
del=data.frame(species=rownames(data))
rownames(del)=del$species
del=del[,-1]
for (i in 1:(ncol(data)/n) ){
dt=data[,(n*i+1-n):(n*i)]
name=colnames(data[,(n*i+1-n):(n*i)])
if (method=="PCA"){
pdt=as.data.frame(prcomp(dt)$rotation)
c1=mean(pdt[,1])
c2=mean(pdt[,2])
pdt$res=0
for (a in 1:n){
pdt$res[a]=(pdt[a,1]-c1)^2+(pdt[a,2]-c2)^2
}
avt=order(pdt$res,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}else{
ddt=as.matrix(dist(t(dt)))
avg_distances <- as.data.frame(colMeans(ddt))
avt=order(avg_distances$`colMeans(ddt)`,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
if (show.del){
comb=list(results=spdt,deleted_data=del)
return(comb)
}else{
return(spdt)
}
}
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
#' KO_1=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_2=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_3=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_4=rnorm(n=5,mean=0.3,sd=0.1)
#' data=data.frame(WT_1,WT_2,WT_3,WT_4,KO_1,KO_2,KO_3,KO_4)
#' rownames(data)=c("LPC(16:0)","PC(14:0/16:1)","PC(18:1/18:1)","PE(18:0/20:1)","PS(20:1/20:1)")
#' n=4
#' m=1
#' delRep(data,n,m)
#' @export
delRepA<-function(data,n,m,method="PCA",show.del=FALSE){
spdt=data.frame(species=rownames(data))
rownames(spdt)=spdt$species
spdt=spdt[,-1]
del=data.frame(species=rownames(data))
rownames(del)=del$species
del=del[,-1]
for (i in 1:(ncol(data)/n) ){
dt=data[,(n*i+1-n):(n*i)]
name=colnames(data[,(n*i+1-n):(n*i)])
if (method=="PCA"){
pdt=as.data.frame(prcomp(dt)$rotation)
c1=mean(pdt[,1])
c2=mean(pdt[,2])
pdt$res=0
for (a in 1:n){
pdt$res[a]=(pdt[a,1]-c1)^2+(pdt[a,2]-c2)^2
}
avt=order(pdt$res,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}else{
ddt=as.matrix(dist(t(dt)))
avg_distances <- as.data.frame(colMeans(ddt))
avt=order(avg_distances$`colMeans(ddt)`,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
if (show.del){
comb=list(results=spdt,deleted_data=del)
return(comb)
}else{
return(spdt)
}
}
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
source("D:/Rpackages/LipidomicsR/R/heatmap.R", echo=TRUE)
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
View(data)
delRep(data,6,2)
m=2
spdt=data.frame(species=rownames(data))
rownames(spdt)=spdt$species
spdt=spdt[,-1]
del=data.frame(species=rownames(data))
rownames(del)=del$species
del=del[,-1]
for (i in 1:(ncol(data)/n) ){
dt=data[,(n*i+1-n):(n*i)]
name=colnames(data[,(n*i+1-n):(n*i)])
if (method=="PCA"){
pdt=as.data.frame(prcomp(dt)$rotation)
c1=mean(pdt[,1])
c2=mean(pdt[,2])
pdt$res=0
for (a in 1:n){
pdt$res[a]=(pdt[a,1]-c1)^2+(pdt[a,2]-c2)^2
}
avt=order(pdt$res,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}else{
ddt=as.matrix(dist(t(dt)))
avg_distances <- as.data.frame(colMeans(ddt))
avt=order(avg_distances$`colMeans(ddt)`,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
for (i in 1:(ncol(data)/n) ){
dt=data[,(n*i+1-n):(n*i)]
name=colnames(data[,(n*i+1-n):(n*i)])
if (method=="PCA"){
pdt=as.data.frame(prcomp(dt)$rotation)
c1=mean(pdt[,1])
c2=mean(pdt[,2])
pdt$res=0
for (a in 1:n){
pdt$res[a]=(pdt[a,1]-c1)^2+(pdt[a,2]-c2)^2
}
avt=order(pdt$res,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:(n-m)]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}else{
ddt=as.matrix(dist(t(dt)))
avg_distances <- as.data.frame(colMeans(ddt))
avt=order(avg_distances$`colMeans(ddt)`,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
#' KO_1=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_2=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_3=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_4=rnorm(n=5,mean=0.3,sd=0.1)
#' data=data.frame(WT_1,WT_2,WT_3,WT_4,KO_1,KO_2,KO_3,KO_4)
#' rownames(data)=c("LPC(16:0)","PC(14:0/16:1)","PC(18:1/18:1)","PE(18:0/20:1)","PS(20:1/20:1)")
#' n=4
#' m=1
#' delRep(data,n,m)
#' @export
delRep<-function(data,n,m,method="PCA",show.del=FALSE){
spdt=data.frame(species=rownames(data))
rownames(spdt)=spdt$species
spdt=spdt[,-1]
del=data.frame(species=rownames(data))
rownames(del)=del$species
del=del[,-1]
for (i in 1:(ncol(data)/n) ){
dt=data[,(n*i+1-n):(n*i)]
name=colnames(data[,(n*i+1-n):(n*i)])
if (method=="PCA"){
pdt=as.data.frame(prcomp(dt)$rotation)
c1=mean(pdt[,1])
c2=mean(pdt[,2])
pdt$res=0
for (a in 1:n){
pdt$res[a]=(pdt[a,1]-c1)^2+(pdt[a,2]-c2)^2
}
avt=order(pdt$res,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:(n-m)]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}else{
ddt=as.matrix(dist(t(dt)))
avg_distances <- as.data.frame(colMeans(ddt))
avt=order(avg_distances$`colMeans(ddt)`,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
if (show.del){
comb=list(results=spdt,deleted_data=del)
return(comb)
}else{
return(spdt)
}
}
delRep(data,6,3)
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
#' KO_1=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_2=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_3=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_4=rnorm(n=5,mean=0.3,sd=0.1)
#' data=data.frame(WT_1,WT_2,WT_3,WT_4,KO_1,KO_2,KO_3,KO_4)
#' rownames(data)=c("LPC(16:0)","PC(14:0/16:1)","PC(18:1/18:1)","PE(18:0/20:1)","PS(20:1/20:1)")
#' n=4
#' m=1
#' delRep(data,n,m)
#' @export
delRep<-function(data,n,m,method="PCA",show.del=FALSE){
spdt=data.frame(species=rownames(data))
rownames(spdt)=spdt$species
spdt=spdt[,-1]
del=data.frame(species=rownames(data))
rownames(del)=del$species
del=del[,-1]
for (i in 1:(ncol(data)/n) ){
dt=data[,(n*i+1-n):(n*i)]
name=colnames(data[,(n*i+1-n):(n*i)])
if (method=="PCA"){
pdt=as.data.frame(prcomp(dt)$rotation)
c1=mean(pdt[,1])
c2=mean(pdt[,2])
pdt$res=0
for (a in 1:n){
pdt$res[a]=(pdt[a,1]-c1)^2+(pdt[a,2]-c2)^2
}
avt=order(pdt$res,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:(n-m)]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}else{
ddt=as.matrix(dist(t(dt)))
avg_distances <- as.data.frame(colMeans(ddt))
avt=order(avg_distances$`colMeans(ddt)`,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:(n-m)]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
if (show.del){
comb=list(results=spdt,deleted_data=del)
return(comb)
}else{
return(spdt)
}
}
source("D:/Rpackages/LipidomicsR/R/delRep.R", echo=TRUE)
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/app2.0.R')
#' KO_1=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_2=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_3=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_4=rnorm(n=5,mean=0.3,sd=0.1)
#' data=data.frame(WT_1,WT_2,WT_3,WT_4,KO_1,KO_2,KO_3,KO_4)
#' rownames(data)=c("LPC(16:0)","PC(14:0/16:1)","PC(18:1/18:1)","PE(18:0/20:1)","PS(20:1/20:1)")
#'
#' m=1
#' delRep(data,n,m)
#' @export
delRep<-function(data,group,m,method="PCA",show.del=FALSE){
spdt=data.frame(species=rownames(data))
rownames(spdt)=spdt$species
spdt=spdt[,-1]
del=data.frame(species=rownames(data))
rownames(del)=del$species
del=del[,-1]
for (i in unique(names(group))){
name <- group[names(group) == i]
n <- length(name)
dt <- data[,name]
if (method=="PCA"){
pdt=as.data.frame(prcomp(dt)$rotation)
c1=mean(pdt[,1])
c2=mean(pdt[,2])
pdt$res=0
for (a in 1:n){
pdt$res[a]=(pdt[a,1]-c1)^2+(pdt[a,2]-c2)^2
}
avt=order(pdt$res,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}else{
ddt=as.matrix(dist(t(dt)))
avg_distances <- as.data.frame(colMeans(ddt))
avt=order(avg_distances$`colMeans(ddt)`,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:n-m]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
if (show.del){
comb=list(results=spdt,deleted_data=del)
return(comb)
}else{
return(spdt)
}
}
group=rep(c("WT","KO"),each=4)
WT_1=rnorm(n=5,mean=0.3,sd=0.1)
WT_2=rnorm(n=5,mean=0.3,sd=0.1)
WT_3=rnorm(n=5,mean=0.3,sd=0.1)
WT_4=rnorm(n=5,mean=0.3,sd=0.1)
KO_1=rnorm(n=5,mean=0.3,sd=0.1)
KO_2=rnorm(n=5,mean=0.3,sd=0.1)
KO_3=rnorm(n=5,mean=0.3,sd=0.1)
KO_4=rnorm(n=5,mean=0.3,sd=0.1)
data=data.frame(WT_1,WT_2,WT_3,WT_4,KO_1,KO_2,KO_3,KO_4)
rownames(data)=c("LPC(16:0)","PC(14:0/16:1)","PC(18:1/18:1)","PE(18:0/20:1)","PS(20:1/20:1)")
group=rep(c("WT","KO"),each=4)
m=1
delRep(data,group,m)
delRep(data,c("WT","KO"),m)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(ggiraph)
library(DT)
library(archive)
library(stringr)
library(colourpicker)
library(shinycssloaders)
library(RColorBrewer)
library(zip)
library(car)
library(rcompanion)
library(LipidomicsR)
library(tidyverse)
library(devEMF)
library(ggsci)
library(reshape2)
library(ggrepel)
library(XML)
groupXpert(data )
group=groupXpert(data )
delRep(data,group,m)
test=read.csv("D:\\Rpackages\\lipidomicR\\R\\test.csv",header = T,row.names = 1)
group=groupXpert(test)
group
groupXpert(data )
group=groupXpert(data )
names(group)=rep(c("WT","KO"),each=4)
delRep(data,group,m)
delRep(data,group,3)
#' KO_1=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_2=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_3=rnorm(n=5,mean=0.3,sd=0.1)
#' KO_4=rnorm(n=5,mean=0.3,sd=0.1)
#' data=data.frame(WT_1,WT_2,WT_3,WT_4,KO_1,KO_2,KO_3,KO_4)
#' rownames(data)=c("LPC(16:0)","PC(14:0/16:1)","PC(18:1/18:1)","PE(18:0/20:1)","PS(20:1/20:1)")
#'
#' m=1
#' delRep(data,n,m)
#' @export
delRep<-function(data,group,m,method="PCA",show.del=FALSE){
spdt=data.frame(species=rownames(data))
rownames(spdt)=spdt$species
spdt=spdt[,-1]
del=data.frame(species=rownames(data))
rownames(del)=del$species
del=del[,-1]
for (i in unique(names(group))){
name <- group[names(group) == i]
n <- length(name)
dt <- data[,name]
if (method=="PCA"){
pdt=as.data.frame(prcomp(dt)$rotation)
c1=mean(pdt[,1])
c2=mean(pdt[,2])
pdt$res=0
for (a in 1:n){
pdt$res[a]=(pdt[a,1]-c1)^2+(pdt[a,2]-c2)^2
}
avt=order(pdt$res,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:(n-m)]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}else{
ddt=as.matrix(dist(t(dt)))
avg_distances <- as.data.frame(colMeans(ddt))
avt=order(avg_distances$`colMeans(ddt)`,decreasing = TRUE)
res=dt[,-avt[1:m]]
colnames(res)=name[1:(n-m)]
dc=as.data.frame(dt[,avt[1:m]])
colnames(dc)=name[avt[1:m]]
}
spdt=cbind(spdt,res)
del=cbind(del,dc)
}
if (show.del){
comb=list(results=spdt,deleted_data=del)
return(comb)
}else{
return(spdt)
}
}
delRep(data,group,3)
delRep(data,group,2)
group=groupXpert(data )
groupXpert(data )
group=colnames(data)
names(group)=rep(c("WT","KO"),each=4)
delRep(data,group,m)
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
install.packages("D:/Rpackages/LipidomicsR_0.3.6.tar.gz", repos = NULL, type = "source")
library(shiny); runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
install.packages("D:/Rpackages/LipidomicsR_0.3.6.tar.gz", repos = NULL, type = "source")
library(shiny); runApp('D:/Rpackages/lipidomicR/R/appv1.7.R')
